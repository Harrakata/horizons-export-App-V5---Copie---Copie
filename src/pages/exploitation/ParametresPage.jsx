import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { useToast } from '@/components/ui/use-toast';
import { Save, Settings, Clock, Bell, Trash2, PlusCircle, Timer, User, AlertTriangle } from 'lucide-react';
import { motion } from 'framer-motion';
import { supabase } from '@/lib/supabaseClient';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

const defaultCreneau = { debut: '09:00', fin: '19:00' };
const SETTINGS_KEY = 'general';

const ParametresPage = () => {
  const { toast } = useToast();
  const [creneauxPointage, setCreneauxPointage] = useState([defaultCreneau]);
  const [rappelActif, setRappelActif] = useState(false);
  const [sessionDureeMinutes, setSessionDureeMinutes] = useState(30);
  const [audioContext, setAudioContext] = useState(null);
  const [activeTimers, setActiveTimers] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [settingsId, setSettingsId] = useState(null);
  const [chefsAgence, setChefsAgence] = useState([]);
  const [sessionDureeIndividuelle, setSessionDureeIndividuelle] = useState({});
  const [messageDeconnexion, setMessageDeconnexion] = useState("Vous allez être automatiquement déconnecté. Veuillez demander au Chef d'agence de se reconnecter");

  const loadChefsAgence = useCallback(async () => {
    const { data, error } = await supabase
      .from('chefs_agence')
      .select('id, nom, prenom, matricule')
      .order('nom', { ascending: true });
    
    if (error) {
      toast({ title: "Erreur de chargement des chefs d'agence", description: error.message, variant: "destructive" });
    } else {
      setChefsAgence(data || []);
    }
  }, [toast]);

  const loadSettings = useCallback(async () => {
    setIsLoading(true);
    const { data, error } = await supabase
      .from('app_settings')
      .select('id, value')
      .eq('key', SETTINGS_KEY)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116: no rows returned
      toast({ title: "Erreur de chargement", description: error.message, variant: "destructive" });
    } else if (data) {
      setSettingsId(data.id);
      setCreneauxPointage(data.value.creneauxPointage || [defaultCreneau]);
      setRappelActif(data.value.rappelActif || false);
      setSessionDureeMinutes(data.value.sessionDureeMinutes || 30);
      setSessionDureeIndividuelle(data.value.sessionDureeIndividuelle || {});
      setMessageDeconnexion(data.value.messageDeconnexion || "Vous allez être automatiquement déconnecté. Veuillez demander au Chef d'agence de se reconnecter");
    } else {
      // No settings found, use defaults and prepare for insert
      setCreneauxPointage([defaultCreneau]);
      setRappelActif(false);
      setSessionDureeMinutes(30);
      setSessionDureeIndividuelle({});
    }
    setIsLoading(false);
  }, [toast]);

  useEffect(() => {
    loadSettings();
    loadChefsAgence();
    if (typeof window !== 'undefined' && !audioContext) {
      try {
        setAudioContext(new (window.AudioContext || window.webkitAudioContext)());
      } catch (e) {
        console.error("AudioContext not supported", e);
        toast({ title: "Audio non supporté", description: "Les rappels sonores ne fonctionneront pas sur ce navigateur.", variant: "warning" });
      }
    }
  }, [loadSettings, loadChefsAgence, audioContext, toast]);

  const playSound = useCallback(() => {
    if (!audioContext) return;
    try {
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      oscillator.type = 'sine';
      oscillator.frequency.setValueAtTime(440, audioContext.currentTime); 
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.5);
    } catch (e) {
      console.error("Error playing sound", e);
    }
  }, [audioContext]);

  const scheduleReminders = useCallback(() => {
    activeTimers.forEach(timerId => clearTimeout(timerId));
    setActiveTimers([]);

    if (!rappelActif || !creneauxPointage || creneauxPointage.length === 0 || !audioContext) return;

    const now = new Date();
    const newTimers = [];

    creneauxPointage.forEach((creneau, index) => {
      const [debutHeure, debutMinute] = creneau.debut.split(':').map(Number);
      const [finHeure, finMinute] = creneau.fin.split(':').map(Number);

      const debutTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), debutHeure, debutMinute, 0);
      const finTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), finHeure, finMinute, 0);
      const rappelFinTime = new Date(finTime.getTime() - 5 * 60000); 

      if (debutTime > now) {
        const debutTimeout = setTimeout(() => {
          playSound();
          toast({ title: `Rappel Pointage ${index + 1}`, description: `Le créneau de pointage N°${index + 1} commence maintenant (${creneau.debut}).`, className: "bg-blue-500 text-white" });
        }, debutTime.getTime() - now.getTime());
        newTimers.push(debutTimeout);
      }

      if (rappelFinTime > now) {
        const finTimeout = setTimeout(() => {
          playSound();
          toast({ title: `Rappel Pointage ${index + 1}`, description: `Le créneau de pointage N°${index + 1} se termine dans 5 minutes (${creneau.fin}).`, className: "bg-orange-500 text-white" });
        }, rappelFinTime.getTime() - now.getTime());
        newTimers.push(finTimeout);
      }
    });
    setActiveTimers(newTimers);
  }, [creneauxPointage, rappelActif, playSound, toast, activeTimers, audioContext]);

  useEffect(() => {
    scheduleReminders();
    return () => activeTimers.forEach(timerId => clearTimeout(timerId));
  }, [scheduleReminders]);


  const handleCreneauChange = (index, field, value) => {
    const newCreneaux = [...creneauxPointage];
    newCreneaux[index][field] = value;
    setCreneauxPointage(newCreneaux);
  };

  const addCreneau = () => {
    setCreneauxPointage([...creneauxPointage, { ...defaultCreneau }]);
  };

  const removeCreneau = (index) => {
    if (creneauxPointage.length === 1) {
      toast({ title: "Action impossible", description: "Au moins un créneau de pointage est requis.", variant: "destructive" });
      return;
    }
    const newCreneaux = creneauxPointage.filter((_, i) => i !== index);
    setCreneauxPointage(newCreneaux);
  };

  const handleChefDureeChange = (chefId, dureeMinutes) => {
    setSessionDureeIndividuelle(prevState => ({
      ...prevState,
      [chefId]: parseInt(dureeMinutes) || sessionDureeMinutes
    }));
  };

  const handleSaveSettings = async () => {
    setIsLoading(true);
    const settingsToSave = {
      creneauxPointage: creneauxPointage,
      rappelActif: rappelActif,
      sessionDureeMinutes: sessionDureeMinutes,
      sessionDureeIndividuelle: sessionDureeIndividuelle,
      messageDeconnexion: messageDeconnexion
    };

    let error;
    if (settingsId) {
      const { error: updateError } = await supabase
        .from('app_settings')
        .update({ value: settingsToSave })
        .eq('id', settingsId);
      error = updateError;
    } else {
      const { data, error: insertError } = await supabase
        .from('app_settings')
        .insert({ key: SETTINGS_KEY, value: settingsToSave })
        .select('id')
        .single();
      error = insertError;
      if (!error && data) {
        setSettingsId(data.id);
      }
    }
    
    if (error) {
      toast({ title: 'Erreur de sauvegarde', description: error.message, variant: 'destructive' });
    } else {
      scheduleReminders(); 
      toast({
        title: 'Paramètres sauvegardés',
        description: 'Les paramètres de pointage et de rappel ont été mis à jour.',
        className: "bg-green-500 text-white"
      });
    }
    setIsLoading(false);
  };

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="max-w-3xl mx-auto shadow-xl glassmorphism">
        <CardHeader>
          <CardTitle className="text-3xl font-bold text-primary flex items-center">
            <Settings className="mr-3 h-8 w-8" /> Paramètres de l'Application
          </CardTitle>
          <CardDescription>
            Configurez les créneaux de pointage et les rappels pour l'application.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-8 py-8">
          {isLoading && !settingsId ? (
             <p className="text-center text-muted-foreground">Chargement des paramètres...</p>
          ) : (
            <>
              <div>
                <Label className="text-lg font-medium text-foreground/90 flex items-center mb-3">
                  <Clock className="mr-2 h-5 w-5 text-primary" /> Créneaux de Pointage Requis par Jour
                </Label>
                {creneauxPointage.map((creneau, index) => (
                  <motion.div 
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center gap-3 mb-3 p-3 border rounded-md bg-muted/30"
                  >
                    <span className="font-semibold text-primary">N°{index + 1}:</span>
                    <Input
                      type="time"
                      value={creneau.debut}
                      onChange={(e) => handleCreneauChange(index, 'debut', e.target.value)}
                      className="w-32"
                      disabled={isLoading}
                    />
                    <span>à</span>
                    <Input
                      type="time"
                      value={creneau.fin}
                      onChange={(e) => handleCreneauChange(index, 'fin', e.target.value)}
                      className="w-32"
                      disabled={isLoading}
                    />
                    {creneauxPointage.length > 1 && (
                      <Button variant="ghost" size="icon" onClick={() => removeCreneau(index)} className="text-red-500 hover:text-red-700" disabled={isLoading}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </motion.div>
                ))}
                <Button onClick={addCreneau} variant="outline" className="mt-2" disabled={isLoading}>
                  <PlusCircle className="mr-2 h-4 w-4" /> Ajouter un créneau
                </Button>
                <p className="text-sm text-muted-foreground mt-2">
                  Définissez les heures de début et de fin pour chaque pointage obligatoire. Le nombre total de créneaux sera le nombre de pointages requis.
                </p>
              </div>

              <div className="space-y-3">
                <Label className="text-lg font-medium text-foreground/90 flex items-center">
                  <Bell className="mr-2 h-5 w-5 text-primary" /> Rappels Sonores
                </Label>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="rappelActif"
                    checked={rappelActif}
                    onChange={(e) => setRappelActif(e.target.checked)}
                    className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                    disabled={isLoading || !audioContext}
                  />
                  <Label htmlFor="rappelActif" className="text-sm font-medium">
                    Activer les rappels sonores (début de créneau et 5 min avant la fin)
                  </Label>
                </div>
                {!audioContext && <p className="text-xs text-red-500">Les rappels sonores ne sont pas supportés par votre navigateur.</p>}
                <p className="text-sm text-muted-foreground">
                  Si activé, une notification sonore sera jouée au début de chaque créneau et 5 minutes avant sa fin.
                  Assurez-vous que le son de votre appareil est activé.
                </p>
              </div>

              <div className="space-y-5 border-t pt-5">
                <Label className="text-lg font-medium text-foreground/90 flex items-center">
                  <Timer className="mr-2 h-5 w-5 text-primary" /> Durée de Session
                </Label>
                
                {/* Durée de session globale */}
                <div className="space-y-3">
                  <Label className="font-medium">Durée de session globale</Label>
                  <div className="flex items-center space-x-2">
                    <Input
                      type="number"
                      id="sessionDuree"
                      value={sessionDureeMinutes}
                      onChange={(e) => setSessionDureeMinutes(parseInt(e.target.value) || 30)}
                      className="w-24"
                      min={5}
                      max={240}
                      disabled={isLoading}
                    />
                    <Label htmlFor="sessionDuree" className="text-sm font-medium">
                      minutes
                    </Label>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Définissez la durée maximale d'une session avant déconnexion automatique.
                    Une notification apparaîtra avant l'expiration de la session.
                  </p>
                </div>
                
                {/* Message de déconnexion */}
                <div className="space-y-3">
                  <Label className="font-medium flex items-center">
                    <AlertTriangle className="mr-2 h-4 w-4 text-amber-500" /> 
                    Message de déconnexion
                  </Label>
                  <Input
                    type="text"
                    value={messageDeconnexion}
                    onChange={(e) => setMessageDeconnexion(e.target.value)}
                    className="w-full"
                    disabled={isLoading}
                    placeholder="Message affiché lors de la déconnexion automatique"
                  />
                </div>
                
                {/* Durée de session par chef d'agence */}
                <div className="space-y-3 mt-6">
                  <Label className="font-medium flex items-center">
                    <User className="mr-2 h-4 w-4 text-primary" /> 
                    Durée de session individuelle par Chef d'agence
                  </Label>
                  
                  {isLoading ? (
                    <p className="text-center text-muted-foreground py-2">Chargement des chefs d'agence...</p>
                  ) : chefsAgence.length > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Matricule</TableHead>
                          <TableHead>Nom</TableHead>
                          <TableHead>Prénom</TableHead>
                          <TableHead>Durée (min)</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {chefsAgence.map((chef) => (
                          <TableRow key={chef.id}>
                            <TableCell>{chef.matricule}</TableCell>
                            <TableCell>{chef.nom}</TableCell>
                            <TableCell>{chef.prenom}</TableCell>
                            <TableCell>
                              <Input
                                type="number"
                                value={sessionDureeIndividuelle[chef.id] || ''}
                                onChange={(e) => handleChefDureeChange(chef.id, e.target.value)}
                                className="w-20"
                                min={5}
                                max={240}
                                disabled={isLoading}
                                placeholder={sessionDureeMinutes.toString()}
                              />
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <p className="text-center text-muted-foreground">Aucun chef d'agence trouvé.</p>
                  )}
                  
                  <p className="text-sm text-muted-foreground">
                    Définissez une durée de session spécifique pour chaque Chef d'agence, ou laissez vide pour utiliser la durée globale.
                  </p>
                </div>
              </div>

              <div className="p-4 border-l-4 border-blue-500 bg-blue-50 dark:bg-blue-900/30 rounded-md">
                <h4 className="font-semibold text-blue-700 dark:text-blue-300">Note importante</h4>
                <p className="text-sm text-blue-600 dark:text-blue-400">
                  Les modifications apportées ici affecteront le fonctionnement global du système de pointage. 
                  Veuillez configurer avec soin. Les rappels ne fonctionneront que si cette page ou l'application reste ouverte dans le navigateur.
                </p>
              </div>
            </>
          )}

        </CardContent>
        <CardFooter>
          <Button 
            onClick={handleSaveSettings} 
            size="lg" 
            className="w-full md:w-auto ml-auto bg-gradient-to-r from-primary to-green-600 hover:from-primary/90 hover:to-green-600/90 text-white text-lg"
            disabled={isLoading}
          >
            {isLoading ? <><Clock className="mr-2 h-5 w-5 animate-spin" /> Sauvegarde...</> : <><Save className="mr-2 h-5 w-5" /> Sauvegarder les Paramètres</>}
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  );
};

export default ParametresPage;
