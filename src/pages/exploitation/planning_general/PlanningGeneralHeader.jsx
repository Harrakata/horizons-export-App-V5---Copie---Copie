
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { CardTitle, CardDescription } from '@/components/ui/card';
import { CalendarDays, FileDown, ChevronLeft, ChevronRight } from 'lucide-react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar'; 

const PlanningGeneralHeader = ({
  currentMonth, // Used for month display, might be derived from dateRange.start
  dateRange,
  handlePrevMonth,
  handleNextMonth,
  onDateFilterChange,
  filterAgence,
  setFilterAgence,
  filterChef,
  setFilterChef,
  onExport,
  isLoading,
}) => {
  const [selectedFilterOption, setSelectedFilterOption] = useState('this_month');
  const [customStartDate, setCustomStartDate] = useState(dateRange.start);
  const [customEndDate, setCustomEndDate] = useState(dateRange.end);

  const handleFilterChange = (value) => {
    setSelectedFilterOption(value);
    if (value !== 'custom') {
      onDateFilterChange(value);
    }
  };
  
  const applyCustomDateRange = () => {
    if (customStartDate && customEndDate && customStartDate <= customEndDate) {
      onDateFilterChange('custom', { start: customStartDate, end: customEndDate });
    }
  };

  const displayDate = dateRange.start && dateRange.end ? 
    `${format(dateRange.start, 'dd MMM yyyy', { locale: fr })} - ${format(dateRange.end, 'dd MMM yyyy', { locale: fr })}`
    : format(currentMonth, 'MMMM yyyy', { locale: fr });


  return (
    <>
      <div className="flex flex-col md:flex-row justify-between items-start gap-4">
        <div>
          <CardTitle className="text-3xl font-bold text-primary flex items-center">
            <CalendarDays className="mr-3 h-8 w-8" /> Planning Général Agrégé
          </CardTitle>
          <CardDescription>Vue d'ensemble des plannings de toutes les agences et conformité.</CardDescription>
        </div>
        <div className="flex items-center gap-2">
          <Button onClick={handlePrevMonth} variant="outline" size="icon" disabled={isLoading}><ChevronLeft className="h-4 w-4" /></Button>
          <span className="text-lg font-semibold text-primary whitespace-nowrap min-w-[200px] text-center">
            {displayDate}
          </span>
          <Button onClick={handleNextMonth} variant="outline" size="icon" disabled={isLoading}><ChevronRight className="h-4 w-4" /></Button>
        </div>
      </div>
      <div className="mt-6 flex flex-col md:flex-row md:items-center gap-4">
        <Input 
          placeholder="Filtrer par nom d'agence..." 
          value={filterAgence}
          onChange={(e) => setFilterAgence(e.target.value)}
          className="max-w-xs"
          disabled={isLoading}
        />
        <Input 
          placeholder="Filtrer par nom de chef d'agence..." 
          value={filterChef}
          onChange={(e) => setFilterChef(e.target.value)}
          className="max-w-xs"
          disabled={isLoading}
        />
        <Select value={selectedFilterOption} onValueChange={handleFilterChange} disabled={isLoading}>
          <SelectTrigger className="w-full md:w-[180px]">
            <SelectValue placeholder="Filtrer par date" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="today">Aujourd'hui</SelectItem>
            <SelectItem value="this_week">Cette semaine</SelectItem>
            <SelectItem value="next_week">Semaine prochaine</SelectItem>
            <SelectItem value="this_month">Ce mois-ci</SelectItem>
            <SelectItem value="next_month">Mois prochain</SelectItem>
            <SelectItem value="custom">Personnalisé</SelectItem>
          </SelectContent>
        </Select>
        {selectedFilterOption === 'custom' && (
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" disabled={isLoading}>Choisir dates</Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <div className="p-4 space-y-2">
                <div>
                    <p className="text-sm font-medium">Date de début</p>
                    <Calendar mode="single" selected={customStartDate} onSelect={setCustomStartDate} initialFocus/>
                </div>
                <div>
                    <p className="text-sm font-medium">Date de fin</p>
                    <Calendar mode="single" selected={customEndDate} onSelect={setCustomEndDate} initialFocus/>
                </div>
                <Button onClick={applyCustomDateRange} className="w-full" disabled={isLoading}>Appliquer</Button>
              </div>
            </PopoverContent>
          </Popover>
        )}
        <Button variant="outline" className="ml-auto" onClick={onExport} disabled={isLoading}>
          <FileDown className="mr-2 h-4 w-4" /> Exporter
        </Button>
      </div>
    </>
  );
};

export default PlanningGeneralHeader;
