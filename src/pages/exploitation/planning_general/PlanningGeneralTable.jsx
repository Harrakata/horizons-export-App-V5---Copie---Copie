
import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableCaption } from '@/components/ui/table';
import { motion } from 'framer-motion';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

const PlanningGeneralTable = ({ filteredAgencesStatus, currentMonthDisplay, dateRange }) => {
  const displayDateText = () => {
    if (dateRange && dateRange.start && dateRange.end) {
        const start = format(dateRange.start, 'dd MMM yyyy', { locale: fr });
        const end = format(dateRange.end, 'dd MMM yyyy', { locale: fr });
        if (start === end) return `pour le ${start}`;
        return `pour la période du ${start} au ${end}`;
    }
    return currentMonthDisplay ? `pour ${format(currentMonthDisplay, 'MMMM yyyy', { locale: fr })}` : '';
  };

  return (
    <Table>
      <TableCaption>État des plannings {displayDateText()}.</TableCaption>
      <TableHeader>
        <TableRow>
          <TableHead>Agence</TableHead>
          <TableHead>Chef d'Agence</TableHead>
          <TableHead className="text-center">Terminaux</TableHead>
          <TableHead className="text-center">Jours Couverts / Total</TableHead>
          <TableHead className="text-center">% Complétude</TableHead>
          <TableHead className="text-center">Statut</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {filteredAgencesStatus && filteredAgencesStatus.length > 0 ? (
          filteredAgencesStatus.map((status, index) => (
            <motion.tr 
              key={status.id || status.agenceNom + index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
              className={!status.isCompliant ? "bg-red-50 dark:bg-red-900/30 hover:bg-red-100 dark:hover:bg-red-900/50" : "hover:bg-muted/50 dark:hover:bg-muted/20"}
            >
              <TableCell className="font-medium">{status.agenceNom}</TableCell>
              <TableCell>{status.chefNom}</TableCell>
              <TableCell className="text-center">{status.nbreTerminaux}</TableCell>
              <TableCell className="text-center">{status.joursCouverts} / {status.joursTotal}</TableCell>
              <TableCell className={`text-center font-semibold ${status.isCompliant ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>{status.completion}</TableCell>
              <TableCell className="text-center">
                {status.isCompliant ? 
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-200">
                    Conforme
                  </span> :
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-200">
                    Non Conforme
                  </span>
                }
              </TableCell>
            </motion.tr>
          ))
        ) : (
          <TableRow>
            <TableCell colSpan={6} className="text-center text-muted-foreground py-8">
              Aucune donnée de planning à afficher pour les filtres sélectionnés et la période choisie.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
};

export default PlanningGeneralTable;
