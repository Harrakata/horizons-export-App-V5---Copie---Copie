
import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Calendar as CalendarIcon } from 'lucide-react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, getDay, isSameDay, isWithinInterval } from 'date-fns';
import { fr } from 'date-fns/locale';
import { cn } from '@/lib/utils';
import PlanningDetailsModal from './PlanningDetailsModal';

const CalendarView = ({ currentMonth, planningData, agences, guichetieres, dateRange }) => {
  const [selectedModalData, setSelectedModalData] = useState(null); // {date, agence}

  const activeDateRange = dateRange && dateRange.start && dateRange.end ? dateRange : { start: startOfMonth(currentMonth), end: endOfMonth(currentMonth) };

  const daysToDisplay = useMemo(() => {
    const start = startOfMonth(activeDateRange.start); // Toujours afficher le mois complet de la date de début de la plage
    const end = endOfMonth(activeDateRange.end); // Afficher jusqu'à la fin du mois de la date de fin
    // Si la plage est sur plusieurs mois, il faut une logique plus complexe pour afficher tous les jours concernés.
    // Pour l'instant, on se base sur le mois de `currentMonth` ou le premier mois de `dateRange`
    return eachDayOfInterval({ start: startOfMonth(currentMonth), end: endOfMonth(currentMonth) });
  }, [currentMonth, activeDateRange]);


  const firstDayOfMonthToDisplay = getDay(startOfMonth(currentMonth)); 
  const emptyStartCells = Array(firstDayOfMonthToDisplay === 0 ? 6 : firstDayOfMonthToDisplay - 1).fill(null);

  const getPlanningForDayAndAgence = (date, agenceNom) => {
    const dateStr = format(date, 'yyyy-MM-dd');
    const planningEntriesForDay = planningData.filter(p => p.date === dateStr && p.agenceNom === agenceNom);
    return planningEntriesForDay; 
  };

  const handleDayClick = (date, agence) => {
    // Vérifier si le jour cliqué est dans la plage active
    if (isWithinInterval(date, { start: activeDateRange.start, end: activeDateRange.end })) {
      setSelectedModalData({ date, agence });
    } else {
        // Optionnel: informer l'utilisateur que la date est hors plage
        console.log("Date hors de la plage de filtre active.");
    }
  };

  const closeModal = () => {
    setSelectedModalData(null);
  };

  return (
    <Card className="mt-6 shadow-lg glassmorphism">
      <CardHeader>
        <div className="flex justify-between items-center">
            <h3 className="text-2xl font-semibold text-primary flex items-center">
                <CalendarIcon className="mr-2 h-6 w-6" /> Vue Calendrier du Planning
            </h3>
        </div>
        <p className="text-sm text-muted-foreground">
            Affiche le planning pour le mois de {format(currentMonth, 'MMMM yyyy', { locale: fr })}.
            Les couleurs indiquent la complétude du planning par rapport aux terminaux de l'agence.
        </p>
      </CardHeader>
      <CardContent className="overflow-x-auto">
        <div className="grid grid-cols-7 gap-1 text-center font-medium text-muted-foreground mb-2">
          {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map(day => <div key={day}>{day}</div>)}
        </div>
        <div className="grid grid-cols-7 gap-1">
          {emptyStartCells.map((_, index) => <div key={`empty-${index}`} className="border rounded-md p-1 min-h-[100px] bg-muted/10"></div>)}
          {daysToDisplay.map(day => {
            const isDayInActiveRange = isWithinInterval(day, { start: activeDateRange.start, end: activeDateRange.end });
            return (
              <div key={day.toString()} className={cn("border rounded-md p-1 min-h-[100px] space-y-0.5", isDayInActiveRange ? "bg-background/50 dark:bg-background/30" : "bg-muted/20 dark:bg-muted/40 opacity-60")}>
                <div className={`font-semibold text-sm ${isSameDay(day, new Date()) ? 'text-primary font-bold' : 'text-muted-foreground'}`}>
                  {format(day, 'd')}
                </div>
                {isDayInActiveRange && (
                    <div className="space-y-0.5 text-xs max-h-[80px] overflow-y-auto custom-scrollbar-xs">
                    {(agences || []).map(agence => {
                        const nbreTerminaux = parseInt(agence.nbreTerminaux) || 0;
                        const planningEventsForDayAndAgence = getPlanningForDayAndAgence(day, agence.nom);
                        const guichetieresPlanifieesCount = new Set(planningEventsForDayAndAgence.map(p => p.guichetiereId)).size;
                        
                        let bgColor = 'bg-gray-200 dark:bg-gray-700'; 
                        if (nbreTerminaux > 0) {
                            if (guichetieresPlanifieesCount === 0) bgColor = 'bg-red-200 dark:bg-red-800';
                            else if (guichetieresPlanifieesCount < nbreTerminaux) bgColor = 'bg-yellow-200 dark:bg-yellow-700';
                            else if (guichetieresPlanifieesCount >= nbreTerminaux) bgColor = 'bg-green-200 dark:bg-green-700';
                        } else if (guichetieresPlanifieesCount > 0) {
                            bgColor = 'bg-green-200 dark:bg-green-700'; 
                        }

                        return (
                        <div 
                            key={agence.id} 
                            onClick={() => handleDayClick(day, agence)}
                            className={cn(
                            "p-0.5 rounded text-[10px] leading-tight cursor-pointer hover:ring-1 hover:ring-primary",
                            bgColor,
                            "text-gray-800 dark:text-gray-100"
                            )}
                        >
                            {agence.nom}: {guichetieresPlanifieesCount}
                        </div>
                        );
                    })}
                    </div>
                )}
              </div>
            );
          })}
        </div>
        {selectedModalData && (
            <PlanningDetailsModal 
                date={selectedModalData.date} 
                agence={selectedModalData.agence} 
                allPlanningData={planningData} 
                allGuichetieres={guichetieres}
                onClose={closeModal} 
            />
        )}
      </CardContent>
    </Card>
  );
};

export default CalendarView;
