
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { AlertTriangle, Loader2 } from 'lucide-react';
import { motion } from 'framer-motion';
import { addMonths, subMonths, startOfWeek, endOfWeek, startOfDay, endOfDay, isSameMonth, getWeek, startOfMonth, endOfMonth, format } from 'date-fns';
import { usePlanningGeneralData } from '@/hooks/usePlanningGeneralData';
import PlanningGeneralHeader from '@/pages/exploitation/planning_general/PlanningGeneralHeader';
import PlanningGeneralTable from '@/pages/exploitation/planning_general/PlanningGeneralTable';
import CalendarView from '@/pages/exploitation/planning_general/CalendarView';
import { useToast } from '@/components/ui/use-toast';
import { supabase } from '@/lib/supabaseClient';

const PlanningGeneralPage = () => {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [dateRange, setDateRange] = useState({ start: startOfMonth(currentMonth), end: endOfMonth(currentMonth) });
  const { toast } = useToast();
  const {
    agences,
    chefsAgence,
    planningData,
    guichetieres,
    filterAgence,
    setFilterAgence,
    filterChef,
    setFilterChef,
    filteredAgencesStatus,
    isLoading: dataIsLoading,
    refetchData,
  } = usePlanningGeneralData(dateRange.start, dateRange.end);

  const [isLoading, setIsLoading] = useState(false); 

  useEffect(() => {
    setIsLoading(true);
    const timer = setTimeout(() => setIsLoading(false), 700); 
    return () => clearTimeout(timer);
  }, [dateRange, filterAgence, filterChef, agences, planningData]);

  useEffect(() => {
    if (!isSameMonth(dateRange.start, currentMonth)) {
        setCurrentMonth(dateRange.start);
    }
  }, [dateRange, currentMonth]);

  const handleDateFilterChange = (selectedOption, customRange) => {
    const now = new Date();
    let newStart = startOfMonth(currentMonth); 
    let newEnd = endOfMonth(currentMonth);

    switch (selectedOption) {
      case 'today':
        newStart = startOfDay(now);
        newEnd = endOfDay(now);
        break;
      case 'this_week':
        newStart = startOfWeek(now, { weekStartsOn: 1 });
        newEnd = endOfWeek(now, { weekStartsOn: 1 });
        break;
      case 'next_week':
        const startOfNextWeekBase = startOfWeek(now, { weekStartsOn: 1 });
        newStart = new Date(startOfNextWeekBase.setDate(startOfNextWeekBase.getDate() + 7));
        newEnd = endOfWeek(newStart, { weekStartsOn: 1 });
        break;
      case 'this_month':
        newStart = startOfMonth(now);
        newEnd = endOfMonth(now);
        break;
      case 'next_month':
        const startOfNextMonth = startOfMonth(addMonths(now, 1));
        newStart = startOfNextMonth;
        newEnd = endOfMonth(startOfNextMonth);
        break;
      case 'custom':
        if (customRange && customRange.start && customRange.end) {
            newStart = customRange.start;
            newEnd = customRange.end;
        } else {
            // fallback si customRange n'est pas bien défini, garde la plage actuelle
            newStart = dateRange.start; 
            newEnd = dateRange.end;
        }
        break;
      default: 
        newStart = startOfMonth(currentMonth);
        newEnd = endOfMonth(currentMonth);
    }
    setDateRange({ start: newStart, end: newEnd });
    if (selectedOption === 'this_month' || selectedOption === 'next_month' || selectedOption === 'today' || selectedOption === 'this_week' || selectedOption === 'next_week') {
        setCurrentMonth(newStart); // Assure que currentMonth est cohérent
    } else if (selectedOption === 'custom' && newStart) {
        setCurrentMonth(newStart);
    }
  };
  
  const handlePrev = () => {
    const newStartMonth = subMonths(dateRange.start,1);
    setDateRange({ start: startOfMonth(newStartMonth), end: endOfMonth(newStartMonth) });
    setCurrentMonth(newStartMonth);
  };
  const handleNext = () => {
    const newStartMonth = addMonths(dateRange.start,1);
    setDateRange({ start: startOfMonth(newStartMonth), end: endOfMonth(newStartMonth) });
    setCurrentMonth(newStartMonth);
  };


  const handleExport = async () => {
    setIsLoading(true);
    try {
        const { data: planningRecords, error: planningError } = await supabase
            .from('planning')
            .select(`
                date,
                agenceNom,
                guichetieres ( nom, prenom, matricule )
            `)
            .gte('date', format(dateRange.start, 'yyyy-MM-dd'))
            .lte('date', format(dateRange.end, 'yyyy-MM-dd'));

        if (planningError) throw planningError;

        if (!planningRecords || planningRecords.length === 0) {
            toast({ title: "Exportation échouée", description: "Aucune donnée de planning à exporter pour la période sélectionnée.", variant: "destructive" });
            setIsLoading(false);
            return;
        }

        const csvHeader = "Date,Agence,Matricule Guichetière,Nom Guichetière,Prénom Guichetière\n";
        const csvRows = planningRecords.map(p => 
            `${p.date},"${p.agenceNom}","${p.guichetieres.matricule}","${p.guichetieres.nom}","${p.guichetieres.prenom}"`
        ).join("\n");
        
        const csvData = csvHeader + csvRows;
        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `planning_general_${format(dateRange.start, 'yyyyMMdd')}_${format(dateRange.end, 'yyyyMMdd')}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        toast({ title: "Exportation réussie", description: "Le planning général a été exporté.", className: "bg-green-500 text-white" });

    } catch (error) {
        toast({ title: "Erreur d'exportation", description: error.message, variant: "destructive" });
    }
    setIsLoading(false);
  };


  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <Card className="shadow-xl glassmorphism">
        <CardHeader>
          <PlanningGeneralHeader
            currentMonth={currentMonth} 
            dateRange={dateRange}
            handlePrevMonth={handlePrev}
            handleNextMonth={handleNext}
            onDateFilterChange={handleDateFilterChange}
            filterAgence={filterAgence}
            setFilterAgence={setFilterAgence}
            filterChef={filterChef}
            setFilterChef={setFilterChef}
            onExport={handleExport}
            isLoading={isLoading || dataIsLoading}
          />
        </CardHeader>
        <CardContent>
          <div className="mb-6 p-4 border-l-4 border-amber-500 bg-amber-50 dark:bg-amber-900/30 rounded-md">
            <h4 className="font-semibold text-amber-700 dark:text-amber-300 flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2"/> Agences non conformes
            </h4>
            <p className="text-sm text-amber-600 dark:text-amber-400">
              Ci-dessous, les agences dont le planning n'est pas complété à 100% ou ne respecte pas le nombre de guichetières par rapport aux terminaux pour la période sélectionnée.
            </p>
          </div>
          {(isLoading || dataIsLoading) ? (
            <div className="flex justify-center items-center h-64">
              <Loader2 className="h-12 w-12 animate-spin text-primary" />
            </div>
          ) : (
            <PlanningGeneralTable 
              filteredAgencesStatus={filteredAgencesStatus}
              currentMonthDisplay={currentMonth} 
              dateRange={dateRange} 
            />
          )}
        </CardContent>
      </Card>

      {(isLoading || dataIsLoading) ? (
         <div className="flex justify-center items-center h-64">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <p className="ml-4 text-muted-foreground">Chargement du calendrier...</p>
          </div>
      ) : (
        <CalendarView 
          currentMonth={currentMonth}
          planningData={planningData}
          agences={agences}
          chefsAgence={chefsAgence}
          guichetieres={guichetieres}
          dateRange={dateRange}
        />
      )}
    </motion.div>
  );
};

export default PlanningGeneralPage;
