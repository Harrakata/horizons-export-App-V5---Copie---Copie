import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableCaption } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from '@/components/ui/dialog';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { PlusCircle, Edit, Trash2, Search, FileUp, FileDown, Building, MapPin, Hash, Users, Globe } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { motion } from 'framer-motion';
import { supabase } from '@/lib/supabaseClient';

const AgencesPage = () => {
  const { toast } = useToast();
  const [agences, setAgences] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentAgence, setCurrentAgence] = useState(null);
  const [formData, setFormData] = useState({
    nom: '', codePDV: '', adresse: '', region: '', nbreTerminaux: ''
  });
  const [isLoading, setIsLoading] = useState(false);

  const loadAgences = useCallback(async () => {
    setIsLoading(true);
    const { data, error } = await supabase.from('agences').select('*').order('nom', { ascending: true });
    if (error) {
      toast({ title: 'Erreur de chargement', description: error.message, variant: 'destructive' });
    } else {
      setAgences(data);
    }
    setIsLoading(false);
  }, [toast]);

  useEffect(() => {
    loadAgences();
  }, [loadAgences]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const resetFormData = useCallback(() => {
    setFormData({ nom: '', codePDV: '', adresse: '', region: '', nbreTerminaux: '' });
  }, []);

  const handleSubmit = async () => {
    if (!formData.nom || !formData.codePDV || !formData.nbreTerminaux) {
      toast({ title: 'Erreur', description: 'Veuillez remplir tous les champs obligatoires (Nom, Code PDV, Nombre de Terminaux).', variant: 'destructive' });
      return;
    }
    if (isNaN(parseInt(formData.nbreTerminaux)) || parseInt(formData.nbreTerminaux) <= 0) {
      toast({ title: 'Erreur', description: 'Le nombre de terminaux doit être un nombre positif.', variant: 'destructive' });
      return;
    }

    setIsLoading(true);
    let error;
    if (currentAgence) {
      const { error: updateError } = await supabase.from('agences').update(formData).eq('id', currentAgence.id);
      error = updateError;
    } else {
      const { error: insertError } = await supabase.from('agences').insert(formData);
      error = insertError;
    }

    if (error) {
      toast({ title: 'Erreur d\'enregistrement', description: error.message, variant: 'destructive' });
    } else {
      toast({ title: 'Succès', description: `Agence ${currentAgence ? 'modifiée' : 'ajoutée'} avec succès.`, className: "bg-green-500 text-white" });
      setIsDialogOpen(false);
      setCurrentAgence(null);
      resetFormData();
      loadAgences();
    }
    setIsLoading(false);
  };

  const openDialog = (agence = null) => {
    setCurrentAgence(agence);
    if (agence) {
      setFormData({ 
        nom: agence.nom, 
        codePDV: agence.codePDV, 
        adresse: agence.adresse || '', 
        region: agence.region || '', 
        nbreTerminaux: agence.nbreTerminaux 
      });
    } else {
      resetFormData();
    }
    setIsDialogOpen(true);
  };

  const handleDelete = async (id) => {
    setIsLoading(true);
    const { error } = await supabase.from('agences').delete().eq('id', id);
    if (error) {
      toast({ title: 'Erreur de suppression', description: error.message, variant: 'destructive' });
    } else {
      toast({ title: 'Succès', description: 'Agence supprimée.', className: "bg-red-500 text-white" });
      loadAgences();
    }
    setIsLoading(false);
  };

  const filteredAgences = agences.filter(agence => 
    Object.values(agence).some(val => 
      String(val).toLowerCase().includes(searchTerm.toLowerCase())
    )
  );

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  const convertToCSV = (data) => {
    if (!data || data.length === 0) return '';
    const headers = ['nom', 'codePDV', 'adresse', 'region', 'nbreTerminaux'].join(',');
    const rows = data.map(row => 
      [row.nom, row.codePDV, row.adresse || '', row.region || '', row.nbreTerminaux].map(value => `"${String(value).replace(/"/g, '""')}"`).join(',')
    );
    return `${headers}\n${rows.join('\n')}`;
  };

  const handleExport = () => {
    const csvData = convertToCSV(agences);
     if (!csvData) {
        toast({ title: "Exportation échouée", description: "Aucune donnée à exporter.", variant: "destructive" });
        return;
    }
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'pmu_agences.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "Exportation réussie", description: "Les données des agences ont été exportées au format CSV.", className: "bg-green-500 text-white" });
  };

  const handleImport = async (event) => {
    const file = event.target.files[0];
    if (file) {
      setIsLoading(true);
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const text = e.target.result;
          const rows = text.split('\n').filter(row => row.trim() !== '');
          if (rows.length < 2) throw new Error("Fichier CSV vide ou en-têtes manquants.");
          
          const headers = rows[0].trim().split(',').map(h => h.replace(/^"|"$/g, '').trim());
          const requiredHeaders = ['nom', 'codePDV', 'nbreTerminaux'];
          if (!requiredHeaders.every(rh => headers.includes(rh))) {
             throw new Error(`En-têtes manquants. Requis: ${requiredHeaders.join(', ')}. Présents: ${headers.join(', ')}`);
          }

          const dataToUpsert = rows.slice(1).map(rowStr => {
            const values = rowStr.split(',').map(v => v.replace(/^"|"$/g, '').replace(/""/g, '"').trim());
            let obj = {};
            headers.forEach((header, index) => {
              obj[header] = values[index];
            });
            
            const nbreTerminauxParsed = parseInt(obj.nbreTerminaux);
            if (isNaN(nbreTerminauxParsed)) {
              console.warn(`Nombre de terminaux invalide pour l'agence ${obj.nom}, ligne ignorée.`);
              return null; 
            }

            return {
              nom: obj.nom,
              codePDV: obj.codePDV,
              adresse: obj.adresse || null,
              region: obj.region || null,
              nbreTerminaux: nbreTerminauxParsed
            };
          }).filter(item => item && item.nom && item.codePDV && !isNaN(item.nbreTerminaux));

          if (dataToUpsert.length > 0) {
            const { error } = await supabase.from('agences').upsert(dataToUpsert, { onConflict: 'codePDV' });
            if (error) throw error;
            toast({ title: "Importation réussie", description: `${dataToUpsert.length} agences importées/mises à jour.`, className: "bg-green-500 text-white" });
            loadAgences();
          } else {
            toast({ title: "Erreur d'importation", description: "Aucune donnée valide trouvée dans le fichier CSV ou format incorrect.", variant: "destructive" });
          }
        } catch (error) {
          toast({ title: "Erreur d'importation", description: `Impossible de lire le fichier CSV: ${error.message}`, variant: "destructive" });
        } finally {
          setIsLoading(false);
        }
      };
      reader.readAsText(file, 'UTF-8');
    }
    if (event.target) event.target.value = null;
  };

  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="space-y-6"
    >
      <Card className="shadow-xl glassmorphism">
        <CardHeader>
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div>
              <CardTitle className="text-3xl font-bold text-primary">Gestion des Agences</CardTitle>
              <CardDescription>Ajoutez, modifiez ou supprimez les agences PMU.</CardDescription>
            </div>
            <Dialog open={isDialogOpen} onOpenChange={(isOpen) => { setIsDialogOpen(isOpen); if (!isOpen) resetFormData(); }}>
              <DialogTrigger asChild>
                <Button onClick={() => openDialog()} className="bg-gradient-to-r from-primary to-green-600 hover:from-primary/90 hover:to-green-600/90 text-white" disabled={isLoading}>
                  <PlusCircle className="mr-2 h-5 w-5" /> Ajouter une Agence
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md glassmorphism">
                <DialogHeader>
                  <DialogTitle className="text-2xl text-primary">{currentAgence ? 'Modifier' : 'Ajouter'} une Agence</DialogTitle>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  {[
                    { id: 'nom', label: 'Nom de l\'Agence', icon: <Building className="h-4 w-4" /> },
                    { id: 'codePDV', label: 'Code PDV', icon: <Hash className="h-4 w-4" /> },
                    { id: 'adresse', label: 'Adresse', icon: <MapPin className="h-4 w-4" /> },
                    { id: 'region', label: 'Région', icon: <Globe className="h-4 w-4" /> },
                    { id: 'nbreTerminaux', label: 'Nombre de Terminaux', type: 'number', icon: <Users className="h-4 w-4" /> }
                  ].map(field => (
                    <div className="grid grid-cols-4 items-center gap-4" key={field.id}>
                      <Label htmlFor={field.id} className="text-right flex items-center justify-end">
                        {field.icon && React.cloneElement(field.icon, { className: 'mr-1' })}
                        {field.label}
                      </Label>
                      <Input id={field.id} name={field.id} type={field.type || 'text'} value={formData[field.id]} onChange={handleInputChange} className="col-span-3" disabled={isLoading} />
                    </div>
                  ))}
                </div>
                <DialogFooter>
                  <DialogClose asChild><Button variant="outline" type="button" onClick={resetFormData} disabled={isLoading}>Annuler</Button></DialogClose>
                  <Button onClick={handleSubmit} className="bg-primary hover:bg-primary/90" disabled={isLoading}>
                    {isLoading ? 'Enregistrement...' : (currentAgence ? 'Sauvegarder' : 'Ajouter')}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
          <div className="mt-6 flex flex-col md:flex-row gap-4">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
              <Input 
                type="text" 
                placeholder="Rechercher une agence..." 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-full"
                disabled={isLoading}
              />
            </div>
            <div className="flex gap-2">
              <Button variant="outline" asChild disabled={isLoading}>
                <Label htmlFor="import-agences" className="cursor-pointer flex items-center">
                  <FileUp className="mr-2 h-4 w-4" /> Importer (CSV)
                  <Input type="file" id="import-agences" accept=".csv" onChange={handleImport} className="hidden" />
                </Label>
              </Button>
              <Button variant="outline" onClick={handleExport} disabled={isLoading || agences.length === 0}><FileDown className="mr-2 h-4 w-4" /> Exporter (CSV)</Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading && agences.length === 0 ? (
            <p className="text-center text-muted-foreground py-8">Chargement des agences...</p>
          ) : (
            <Table>
              <TableCaption>{filteredAgences.length === 0 ? "Aucune agence trouvée." : `Liste de ${filteredAgences.length} agence(s).`}</TableCaption>
              <TableHeader>
                <TableRow>
                  <TableHead>Nom</TableHead>
                  <TableHead>Code PDV</TableHead>
                  <TableHead>Adresse</TableHead>
                  <TableHead>Région</TableHead>
                  <TableHead>Terminaux</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredAgences.map((agence, index) => (
                  <motion.tr 
                    key={agence.id}
                    variants={itemVariants}
                    initial="hidden"
                    animate="visible"
                    transition={{ delay: index * 0.05 }}
                  >
                    <TableCell className="font-medium">{agence.nom}</TableCell>
                    <TableCell>{agence.codePDV}</TableCell>
                    <TableCell>{agence.adresse || 'N/A'}</TableCell>
                    <TableCell>{agence.region || 'N/A'}</TableCell>
                    <TableCell>{agence.nbreTerminaux}</TableCell>
                    <TableCell className="text-right space-x-1">
                      <Button variant="ghost" size="icon" onClick={() => openDialog(agence)} className="text-blue-500 hover:text-blue-700" disabled={isLoading}>
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-700" disabled={isLoading}>
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="sm:max-w-md">
                              <DialogHeader>
                                  <DialogTitle>Confirmer la suppression</DialogTitle>
                                  <DialogDescription>
                                      Êtes-vous sûr de vouloir supprimer l'agence {agence.nom} ? Cette action est irréversible et supprimera les plannings associés.
                                  </DialogDescription>
                              </DialogHeader>
                              <DialogFooter>
                                  <DialogClose asChild><Button variant="outline" disabled={isLoading}>Annuler</Button></DialogClose>
                                  <Button variant="destructive" onClick={() => handleDelete(agence.id)} disabled={isLoading}>
                                    {isLoading ? 'Suppression...' : 'Supprimer'}
                                  </Button>
                              </DialogFooter>
                          </DialogContent>
                      </Dialog>
                    </TableCell>
                  </motion.tr>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default AgencesPage;
