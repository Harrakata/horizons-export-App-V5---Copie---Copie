
import React from 'react';

const convertToCSV = (data) => {
  if (!data || data.length === 0) return '';
  const headers = Object.keys(data[0]).filter(h => h !== 'mdp'); 
  const csvRows = [
    headers.join(','),
    ...data.map(row => 
      headers.map(fieldName => 
        JSON.stringify(row[fieldName] === undefined || row[fieldName] === null ? '' : row[fieldName])
      ).join(',')
    )
  ];
  return csvRows.join('\r\n');
};

export const useChefAgenceActions = ({ saveData, toast, setIsModalOpen, setCurrentChef }) => {
  
  const handleFormSubmit = (formDataFromForm, isEditing, currentChefToEdit, currentChefsList) => {
    if (!formDataFromForm.matricule || !formDataFromForm.nom || !formDataFromForm.prenom || !formDataFromForm.agenceEnCharge || !formDataFromForm.mdp) {
      toast({ title: "Erreur de validation", description: "Veuillez remplir tous les champs obligatoires (Matricule, Mot de passe, Nom, Prénom, Agence en Charge).", variant: "destructive" });
      return;
    }

    let updatedChefs;
    if (isEditing && currentChefToEdit) {
      updatedChefs = currentChefsList.map((chef) =>
        chef.id === currentChefToEdit.id ? { ...currentChefToEdit, ...formDataFromForm } : chef
      );
      toast({ title: "Succès", description: "Chef d'agence modifié avec succès.", className: "bg-green-500 text-white" });
    } else {
      const newChef = { ...formDataFromForm, id: Date.now().toString() };
      updatedChefs = [...currentChefsList, newChef];
      toast({ title: "Succès", description: "Chef d'agence ajouté avec succès.", className: "bg-green-500 text-white" });
    }
    saveData(updatedChefs);
    setIsModalOpen(false);
    setCurrentChef(null);
  };

  const handleDelete = (id, currentChefsList) => {
    const updatedChefs = currentChefsList.filter((chef) => chef.id !== id);
    saveData(updatedChefs);
    toast({ title: "Succès", description: "Chef d'agence supprimé avec succès.", className: "bg-red-500 text-white" });
  };

  const handleExport = (chefsToExport) => {
    const csvData = convertToCSV(chefsToExport.map(({mdp, ...rest}) => rest));
    if (!csvData) {
        toast({ title: "Rien à exporter", description: "Aucune donnée de chef d'agence à exporter.", variant: "destructive" });
        return;
    }
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "pmu_chefs_agence.csv");
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "Exportation CSV réussie", description: "Les données des chefs d'agence ont été exportées.", className: "bg-green-500 text-white" });
  };

  const handleImport = (event, currentChefsList) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const text = e.target.result;
          const rows = text.split(/\r\n|\n/);
          if (rows.length < 2) throw new Error("Fichier CSV vide ou en-têtes manquants.");

          const headers = rows[0].split(',').map(h => h.replace(/"/g, '').trim());
          const requiredHeaders = ["matricule", "nom", "prenom", "agenceEnCharge"];
          const missingHeaders = requiredHeaders.filter(rh => !headers.includes(rh));
          if (missingHeaders.length > 0) {
            throw new Error(`En-têtes manquants dans le CSV: ${missingHeaders.join(', ')}. Assurez-vous d'inclure au moins matricule, nom, prenom, mdp, agenceEnCharge.`);
          }

          const importedData = rows.slice(1).filter(row => row.trim() !== '').map(row => {
            const values = row.split(',').map(v => v.replace(/"/g, '').trim());
            let obj = {};
            headers.forEach((header, index) => {
              obj[header] = values[index];
            });
            obj.id = obj.id || Date.now().toString() + Math.random().toString(36).substr(2, 9);
            obj.mdp = obj.mdp || 'DefaultPassChef123'; 
            return obj;
          });

          if (importedData.every(item => item.matricule && item.nom && item.mdp && item.agenceEnCharge)) {
            const mergedData = [...currentChefsList];
            importedData.forEach(importedChef => {
                const existingIndex = mergedData.findIndex(chef => chef.matricule === importedChef.matricule);
                if (existingIndex !== -1) {
                    mergedData[existingIndex] = { ...mergedData[existingIndex], ...importedChef };
                } else {
                    mergedData.push(importedChef);
                }
            });
            saveData(mergedData);
            toast({ title: "Importation CSV réussie", description: `${importedData.length} chefs d'agence importés/mis à jour.`, className: "bg-green-500 text-white" });
          } else {
            toast({ title: "Erreur d'importation", description: "Certaines lignes du CSV ont des données manquantes pour les champs requis.", variant: "destructive" });
          }
        } catch (error) {
          toast({ title: "Erreur d'importation CSV", description: `Impossible de lire le fichier: ${error.message}`, variant: "destructive", duration: 7000 });
        }
      };
      reader.readAsText(file);
    }
    if (event.target) event.target.value = null; 
  };

  return { handleFormSubmit, handleDelete, handleExport, handleImport };
};
