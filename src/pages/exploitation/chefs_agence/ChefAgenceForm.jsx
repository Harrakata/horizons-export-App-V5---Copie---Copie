import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Eye, EyeOff, Camera, UploadCloud, X, User, Briefcase, KeyRound } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const ChefAgenceForm = ({ isOpen, onOpenChange, onSubmit, currentChef, agences, resetFormDataState, isLoading }) => {
  const initialFormData = {
    id: '', matricule: '', mdp: '', nom: '', prenom: '', agenceEnCharge: '', codePDV: '', photo_url: '',
  };
  const [formData, setFormData] = useState(initialFormData);
  const [showMdp, setShowMdp] = useState(false);
  const [photoFile, setPhotoFile] = useState(null);
  const [isTakingPhoto, setIsTakingPhoto] = useState(false);
  const [photoTab, setPhotoTab] = useState('upload');
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const { toast } = useToast();
  const fileInputRef = useRef(null);

  useEffect(() => {
    if (currentChef) {
      setFormData({ 
        id: currentChef.id || '',
        matricule: currentChef.matricule || '',
        mdp: currentChef.mdp || '', 
        nom: currentChef.nom || '',
        prenom: currentChef.prenom || '',
        agenceEnCharge: currentChef.agenceEnCharge || '',
        codePDV: currentChef.codePDV || '',
        photo_url: currentChef.photo_url || ''
      });
    } else {
      setFormData(initialFormData);
    }
    setShowMdp(false); 
    setPhotoFile(null);
    setIsTakingPhoto(false);
    setPhotoTab('upload');
  }, [currentChef, isOpen]);

  // Gérer l'accès à la caméra
  useEffect(() => {
    let stream = null;
    if (isTakingPhoto && videoRef.current) {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(mediaStream => {
          stream = mediaStream;
          videoRef.current.srcObject = mediaStream;
          videoRef.current.play();
        })
        .catch(err => {
          console.error("Error accessing camera: ", err);
          toast({ title: "Erreur d'accès à la caméra", description: err.message, variant: "destructive" });
          setIsTakingPhoto(false);
        });
    }
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };
  }, [isTakingPhoto, toast]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleAgenceSelect = (value) => {
    const selectedAgence = agences.find(a => a.nom === value);
    setFormData((prev) => ({
      ...prev,
      agenceEnCharge: value,
      codePDV: selectedAgence ? selectedAgence.codePDV : ''
    }));
  };

  const handlePhotoUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setPhotoFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData(prev => ({ ...prev, photo_url: reader.result })); 
      };
      reader.readAsDataURL(file);
    }
  };

  const capturePhoto = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current;
      const canvas = canvasRef.current;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext('2d');
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      const dataUrl = canvas.toDataURL('image/png');
      
      fetch(dataUrl)
        .then(res => res.blob())
        .then(blob => {
          const file = new File([blob], "capture.png", { type: "image/png" });
          setPhotoFile(file);
          setFormData(prev => ({ ...prev, photo_url: dataUrl }));
          setIsTakingPhoto(false); 
        });
    }
  };

  const deletePhoto = () => {
    setFormData(prev => ({ ...prev, photo_url: '' }));
    setPhotoFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const startCamera = () => setIsTakingPhoto(true);
  const stopCamera = () => setIsTakingPhoto(false);

  const triggerFileUpload = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    onSubmit({...formData, photoFile}, currentChef !== null);
  };
  
  const handleCloseDialog = () => {
    onOpenChange(false);
    if (resetFormDataState) resetFormDataState(); 
  };

  return (
    <DialogContent className="sm:max-w-lg glassmorphism">
      <DialogHeader>
        <DialogTitle className="text-primary text-2xl">{currentChef ? "Modifier le Chef d'Agence" : "Ajouter un Chef d'Agence"}</DialogTitle>
        <DialogDescription>
          {currentChef ? "Mettez à jour les informations du chef d'agence." : "Remplissez les informations pour ajouter un nouveau chef d'agence."}
        </DialogDescription>
      </DialogHeader>
      
      <form onSubmit={handleFormSubmit} className="grid gap-4 py-4 max-h-[70vh] overflow-y-auto p-1">
        {/* Informations personnelles */}
        <div className="space-y-4 border-b pb-4">
          <h3 className="font-semibold text-sm text-muted-foreground mb-2">Informations personnelles</h3>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="matricule" className="text-right flex items-center justify-end">
              <User className="h-4 w-4 mr-1" /> Matricule
            </Label>
            <Input 
              id="matricule" 
              name="matricule" 
              value={formData.matricule} 
              onChange={handleInputChange} 
              className="col-span-3" 
              required 
              disabled={isLoading} 
            />
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="mdp" className="text-right flex items-center justify-end">
              <KeyRound className="h-4 w-4 mr-1" /> Mot de passe
            </Label>
            <div className="col-span-3 relative">
              <Input 
                id="mdp" 
                name="mdp" 
                type={showMdp ? 'text' : 'password'} 
                value={formData.mdp} 
                onChange={handleInputChange} 
                className="pr-10" 
                required 
                disabled={isLoading} 
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                onClick={() => setShowMdp(prev => !prev)}
                disabled={isLoading}
              >
                {showMdp ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="nom" className="text-right flex items-center justify-end">
              <User className="h-4 w-4 mr-1" /> Nom
            </Label>
            <Input 
              id="nom" 
              name="nom" 
              value={formData.nom} 
              onChange={handleInputChange} 
              className="col-span-3" 
              required 
              disabled={isLoading} 
            />
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="prenom" className="text-right flex items-center justify-end">
              <User className="h-4 w-4 mr-1" /> Prénom
            </Label>
            <Input 
              id="prenom" 
              name="prenom" 
              value={formData.prenom} 
              onChange={handleInputChange} 
              className="col-span-3" 
              required 
              disabled={isLoading} 
            />
          </div>
        </div>
        
        {/* Informations professionnelles */}
        <div className="space-y-4 border-b pb-4">
          <h3 className="font-semibold text-sm text-muted-foreground mb-2">Information professionnelle</h3>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="agenceEnCharge" className="text-right flex items-center justify-end">
              <Briefcase className="h-4 w-4 mr-1" /> Agence en charge
            </Label>
            <div className="col-span-3">
              <Select 
                value={formData.agenceEnCharge} 
                onValueChange={handleAgenceSelect}
                disabled={isLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Sélectionnez une agence" />
                </SelectTrigger>
                <SelectContent>
                  {agences.map(agence => (
                    <SelectItem key={agence.id || agence.nom} value={agence.nom}>
                      {agence.nom}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="codePDV" className="text-right flex items-center justify-end">
              <Briefcase className="h-4 w-4 mr-1" /> Code PDV
            </Label>
            <Input 
              id="codePDV" 
              name="codePDV" 
              value={formData.codePDV} 
              className="col-span-3" 
              disabled 
            />
          </div>
        </div>
        
        {/* Photo */}
        <div className="space-y-4 pb-2">
          <h3 className="font-semibold text-sm text-muted-foreground mb-2">Photo</h3>
          
          <div className="flex justify-center mb-3">
            {formData.photo_url ? (
              <div className="relative w-32 h-32">
                <img 
                  src={formData.photo_url} 
                  alt="Prévisualisation" 
                  className="w-32 h-32 object-cover rounded-full border-2 border-primary"
                />
                <Button 
                  type="button" 
                  variant="destructive" 
                  size="icon" 
                  className="absolute -top-2 -right-2 h-6 w-6 rounded-full"
                  onClick={deletePhoto}
                  disabled={isLoading}
                >
                  <X className="h-3 w-3" />
                </Button>
              </div>
            ) : (
              <div className="w-32 h-32 bg-muted rounded-full flex items-center justify-center">
                <User className="h-16 w-16 text-muted-foreground" />
              </div>
            )}
          </div>
          
          <Tabs defaultValue={photoTab} className="w-full" onValueChange={setPhotoTab}>
            <TabsList className="grid grid-cols-2 mb-3">
              <TabsTrigger value="upload" onClick={() => setIsTakingPhoto(false)} disabled={isLoading}>
                <UploadCloud className="h-4 w-4 mr-1.5" />
                Importer
              </TabsTrigger>
              <TabsTrigger value="camera" onClick={() => photoTab === "camera" && !isTakingPhoto && startCamera()} disabled={isLoading}>
                <Camera className="h-4 w-4 mr-1.5" />
                Prendre photo
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="upload" className="space-y-3">
              <Input 
                id="photo"
                ref={fileInputRef}
                type="file" 
                accept="image/*" 
                onChange={handlePhotoUpload} 
                className="hidden"
              />
              <Button 
                type="button" 
                variant="outline" 
                className="w-full"
                onClick={triggerFileUpload}
                disabled={isLoading}
              >
                <UploadCloud className="h-4 w-4 mr-2" /> Sélectionner une image
              </Button>
            </TabsContent>
            
            <TabsContent value="camera" className="space-y-3">
              {isTakingPhoto ? (
                <div className="space-y-3">
                  <div className="aspect-video bg-black rounded-md overflow-hidden relative">
                    <video ref={videoRef} className="w-full h-full object-cover" autoPlay playsInline></video>
                  </div>
                  <canvas ref={canvasRef} className="hidden"></canvas>
                  <div className="flex justify-between">
                    <Button type="button" variant="outline" onClick={stopCamera} disabled={isLoading}>
                      <X className="h-4 w-4 mr-2" /> Annuler
                    </Button>
                    <Button type="button" onClick={capturePhoto} disabled={isLoading}>
                      <Camera className="h-4 w-4 mr-2" /> Capturer
                    </Button>
                  </div>
                </div>
              ) : (
                <Button 
                  type="button" 
                  variant="outline" 
                  className="w-full"
                  onClick={startCamera}
                  disabled={isLoading}
                >
                  <Camera className="h-4 w-4 mr-2" /> Activer la caméra
                </Button>
              )}
            </TabsContent>
          </Tabs>
        </div>
        
        <DialogFooter className="mt-2">
          <DialogClose asChild>
            <Button variant="outline" type="button" onClick={handleCloseDialog} disabled={isLoading}>
              Annuler
            </Button>
          </DialogClose>
          <Button 
            type="submit" 
            className="bg-gradient-to-r from-primary to-green-600 hover:from-primary/90 hover:to-green-600/90 text-white" 
            disabled={isLoading}
          >
            {isLoading ? 'Enregistrement...' : (currentChef ? 'Sauvegarder' : 'Ajouter')}
          </Button>
        </DialogFooter>
      </form>
    </DialogContent>
  );
};

export default ChefAgenceForm;
