import React from 'react';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, TableCaption } from '@/components/ui/table';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Edit, Trash2, User } from 'lucide-react';
import { motion } from 'framer-motion';
import { format, differenceInDays, parseISO, isValid as isValidDate } from 'date-fns';
import { fr } from 'date-fns/locale';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar.jsx';

const GuichetieresTable = ({ guichetieres, onEdit, onDelete, isLoading }) => {
  const getDisponibiliteInfo = (g) => {
    if (g.disponibilite === 'Disponible') return <span className="text-green-500">Disponible</span>;
    
    let infoText = g.disponibilite === 'Absent' ? <span className="text-yellow-500">Absent(e)</span> : <span className="text-red-500">Suspendu(e)</span>;
    
    if (g.datedebutindisponibilite && g.datefinindisponibilite) {
      const debut = parseISO(g.datedebutindisponibilite);
      const fin = parseISO(g.datefinindisponibilite);
      if (isValidDate(debut) && isValidDate(fin)) {
        const jours = differenceInDays(fin, debut) + 1;
        const formattedDebut = format(debut, 'dd/MMM/yy', { locale: fr });
        const formattedFin = format(fin, 'dd/MMM/yy', { locale: fr });
        return (
          <div className="flex flex-col text-xs">
            {infoText}
            <span className="text-muted-foreground">Du {formattedDebut} au {formattedFin} ({jours} jour{jours > 1 ? 's' : ''})</span>
          </div>
        );
      }
    }
    return infoText;
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  if (guichetieres.length === 0 && !isLoading) {
    return <p className="text-center text-muted-foreground py-8">Aucune guichetière trouvée.</p>;
  }

  return (
    <Table>
      <TableCaption>{guichetieres.length === 0 ? "Aucune guichetière trouvée." : `Liste de ${guichetieres.length} guichetière(s).`}</TableCaption>
      <TableHeader>
        <TableRow>
          <TableHead className="w-10">Photo</TableHead>
          <TableHead>Matricule</TableHead>
          <TableHead>Nom & Prénom</TableHead>
          <TableHead>Téléphone</TableHead>
          <TableHead>Agence Assignée</TableHead>
          <TableHead>Disponibilité / Durée</TableHead>
          <TableHead className="text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {guichetieres.map((g, index) => (
          <motion.tr 
            key={g.id}
            variants={itemVariants}
            initial="hidden"
            animate="visible"
            transition={{ delay: index * 0.05 }}
          >
            <TableCell>
              <Avatar className="h-10 w-10 border">
                {g.photo_url ? (
                  <AvatarImage src={g.photo_url} alt={`${g.prenom} ${g.nom}`} />
                ) : null}
                <AvatarFallback className="bg-primary/10">
                  {(g.prenom?.[0] || '') + (g.nom?.[0] || '')}
                </AvatarFallback>
              </Avatar>
            </TableCell>
            <TableCell className="font-medium">{g.matricule}</TableCell>
            <TableCell>{g.nom} {g.prenom}</TableCell>
            <TableCell>{g.telephone || 'N/A'}</TableCell>
            <TableCell>{g.agenceassigne || 'N/A'}</TableCell>
            <TableCell>{getDisponibiliteInfo(g)}</TableCell>
            <TableCell className="text-right space-x-1">
              <Button variant="ghost" size="icon" onClick={() => onEdit(g)} className="text-blue-500 hover:text-blue-700" disabled={isLoading}>
                <Edit className="h-4 w-4" />
              </Button>
              <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-700" disabled={isLoading}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-md">
                      <DialogHeader>
                          <DialogTitle>Confirmer la suppression</DialogTitle>
                          <DialogDescription>
                              Êtes-vous sûr de vouloir supprimer la guichetière {g.prenom} {g.nom} ? Cette action est irréversible et supprimera les plannings et pointages associés.
                          </DialogDescription>
                      </DialogHeader>
                      <DialogFooter>
                          <DialogClose asChild><Button variant="outline" disabled={isLoading}>Annuler</Button></DialogClose>
                          <Button variant="destructive" onClick={() => onDelete(g.id)} disabled={isLoading}>
                            {isLoading ? 'Suppression...' : 'Supprimer'}
                          </Button>
                      </DialogFooter>
                  </DialogContent>
              </Dialog>
            </TableCell>
          </motion.tr>
        ))}
      </TableBody>
    </Table>
  );
};

export default GuichetieresTable;
