
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { User, Phone, KeyRound, Briefcase, CircleDot, Eye, EyeOff, CalendarOff } from 'lucide-react';
import { format, parseISO } from 'date-fns';

const GuichetiereForm = ({
  isOpen,
  onOpenChange,
  onSubmit,
  currentGuichetiere,
  agences,
  isLoading
}) => {
  const initialFormData = {
    matricule: '', codePrepose: '', mdpPrepose: '', nom: '', prenom: '', telephone: '', agenceAssigne: '', 
    disponibilite: 'Disponible', dateDebutIndisponibilite: null, dateFinIndisponibilite: null
  };
  const [formData, setFormData] = useState(initialFormData);
  const [showMdpPrepose, setShowMdpPrepose] = useState(false);
  const disponibiliteOptions = ['Disponible', 'Absent', 'Suspendu'];

  const resetForm = useCallback(() => {
    setFormData(initialFormData);
    setShowMdpPrepose(false);
  }, []);

  useEffect(() => {
    if (isOpen) {
      if (currentGuichetiere) {
        setFormData({
          ...currentGuichetiere,
          dateDebutIndisponibilite: currentGuichetiere.dateDebutIndisponibilite ? format(parseISO(currentGuichetiere.dateDebutIndisponibilite), 'yyyy-MM-dd') : null,
          dateFinIndisponibilite: currentGuichetiere.dateFinIndisponibilite ? format(parseISO(currentGuichetiere.dateFinIndisponibilite), 'yyyy-MM-dd') : null,
        });
      } else {
        resetForm();
      }
    }
  }, [currentGuichetiere, isOpen, resetForm]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value === '' && (name === 'dateDebutIndisponibilite' || name === 'dateFinIndisponibilite') ? null : value }));
  };
  
  const handleSelectChange = (name, value) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData, currentGuichetiere !== null);
  };
  
  const handleCloseDialog = () => {
    onOpenChange(false);
  };

  return (
    <DialogContent className="sm:max-w-lg glassmorphism">
      <DialogHeader>
        <DialogTitle className="text-2xl text-primary">{currentGuichetiere ? 'Modifier' : 'Ajouter'} une Guichetière</DialogTitle>
      </DialogHeader>
      <form onSubmit={handleFormSubmit} className="grid gap-4 py-4 max-h-[70vh] overflow-y-auto p-1">
        {[
          { id: 'matricule', label: 'Matricule', icon: <User className="h-4 w-4" /> },
          { id: 'codePrepose', label: 'Code Préposé', icon: <KeyRound className="h-4 w-4" /> },
          { id: 'mdpPrepose', label: 'MDP Préposé', type: showMdpPrepose ? 'text' : 'password', icon: <KeyRound className="h-4 w-4" />, isPassword: true },
          { id: 'nom', label: 'Nom', icon: <User className="h-4 w-4" /> },
          { id: 'prenom', label: 'Prénom', icon: <User className="h-4 w-4" /> },
          { id: 'telephone', label: 'Numéro de Téléphone', type: 'tel', icon: <Phone className="h-4 w-4" /> }
        ].map(field => (
          <div className="grid grid-cols-4 items-center gap-4" key={field.id}>
            <Label htmlFor={field.id} className="text-right flex items-center justify-end">
              {field.icon && React.cloneElement(field.icon, { className: 'mr-1' })}
              {field.label}
            </Label>
            <div className="col-span-3 relative">
              <Input id={field.id} name={field.id} type={field.type || 'text'} value={formData[field.id] || ''} onChange={handleInputChange} className="pr-10" disabled={isLoading} />
              {field.isPassword && (
                  <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7"
                  onClick={() => setShowMdpPrepose(prev => !prev)}
                  disabled={isLoading}
                >
                  {showMdpPrepose ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </Button>
              )}
            </div>
          </div>
        ))}
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="agenceAssigne" className="text-right flex items-center justify-end"><Briefcase className="h-4 w-4 mr-1" />Agence Assignée</Label>
          <Select name="agenceAssigne" value={formData.agenceAssigne || ''} onValueChange={(value) => handleSelectChange('agenceAssigne', value)} disabled={isLoading}>
            <SelectTrigger className="col-span-3">
              <SelectValue placeholder="Sélectionnez une agence" />
            </SelectTrigger>
            <SelectContent>
              {agences.map(agence => (
                <SelectItem key={agence.id || agence.nom} value={agence.nom}>{agence.nom}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="disponibilite" className="text-right flex items-center justify-end"><CircleDot className="h-4 w-4 mr-1" />Disponibilité</Label>
          <Select name="disponibilite" value={formData.disponibilite} onValueChange={(value) => handleSelectChange('disponibilite', value)} disabled={isLoading}>
            <SelectTrigger className="col-span-3">
              <SelectValue placeholder="Statut de disponibilité" />
            </SelectTrigger>
            <SelectContent>
              {disponibiliteOptions.map(opt => (
                <SelectItem key={opt} value={opt}>{opt}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        {(formData.disponibilite === 'Absent' || formData.disponibilite === 'Suspendu') && (
          <>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="dateDebutIndisponibilite" className="text-right flex items-center justify-end"><CalendarOff className="h-4 w-4 mr-1" />Début Indisponibilité</Label>
              <Input id="dateDebutIndisponibilite" name="dateDebutIndisponibilite" type="date" value={formData.dateDebutIndisponibilite || ''} onChange={handleInputChange} className="col-span-3" disabled={isLoading} />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="dateFinIndisponibilite" className="text-right flex items-center justify-end"><CalendarOff className="h-4 w-4 mr-1" />Fin Indisponibilité</Label>
              <Input id="dateFinIndisponibilite" name="dateFinIndisponibilite" type="date" value={formData.dateFinIndisponibilite || ''} onChange={handleInputChange} className="col-span-3" disabled={isLoading} />
            </div>
          </>
        )}
      <DialogFooter>
        <DialogClose asChild><Button variant="outline" type="button" onClick={handleCloseDialog} disabled={isLoading}>Annuler</Button></DialogClose>
        <Button type="submit" className="bg-primary hover:bg-primary/90" disabled={isLoading}>
          {isLoading ? 'Enregistrement...' : (currentGuichetiere ? 'Sauvegarder' : 'Ajouter')}
        </Button>
      </DialogFooter>
      </form>
    </DialogContent>
  );
};

export default GuichetiereForm;
