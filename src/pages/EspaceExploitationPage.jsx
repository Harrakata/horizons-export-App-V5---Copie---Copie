import React, { useState, useEffect } from 'react';
import { Outlet, Link, useLocation, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Building, Users, UserCog, Settings, CalendarDays, BarChartHorizontalBig, ShieldCheck, LogOut, Loader2, Timer, Wrench } from 'lucide-react';
import { motion } from 'framer-motion';
import { useToast } from '@/components/ui/use-toast';
import { supabase } from '@/lib/supabaseClient';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar.jsx';
import { useSessionTimeout } from '@/hooks/useSessionTimeout';

const LoginPage = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast(); 

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!email || !password) {
      toast({ title: "Erreur", description: "Veuillez remplir tous les champs", variant: "destructive" });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Tenter de se connecter directement avec Supabase Auth
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (error) {
        if (error.message.includes('Invalid login credentials')) {
          toast({ title: "Échec de la connexion", description: "Email ou mot de passe incorrect.", variant: "destructive" });
        } else {
          toast({ title: "Erreur d'authentification", description: error.message, variant: "destructive" });
        }
        setIsLoading(false);
        return;
      }
      
      // Connexion réussie
      const userData = {
        email: data.user.email,
        id: data.user.id,
        role: data.user.user_metadata?.role || 'exploitation'
      };
      
      onLogin(true, userData);
      toast({ title: "Connexion réussie", description: "Bienvenue dans l'Espace Exploitation.", className: "bg-green-500 text-white" });
    } catch (err) {
      toast({ title: "Erreur de système", description: "Une erreur inattendue s'est produite.", variant: "destructive" });
      console.error("Erreur de connexion:", err);
    }
    
    setIsLoading(false);
  };

  return (
    <motion.div 
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      className="flex items-center justify-center min-h-[calc(100vh-200px)]"
    >
      <Card className="w-full max-w-md shadow-2xl glassmorphism">
        <CardHeader>
          <CardTitle className="text-3xl font-bold text-center text-primary">
            <ShieldCheck className="inline-block h-8 w-8 mr-2 text-primary" />
            Accès Espace Exploitation
          </CardTitle>
          <CardDescription className="text-center">Veuillez vous connecter pour continuer.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input 
                id="email" 
                type="email" 
                placeholder="exemple@pmu-mali.ml" 
                value={email} 
                onChange={(e) => setEmail(e.target.value)} 
                required 
                disabled={isLoading}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Mot de passe</Label>
              <Input 
                id="password" 
                type="password" 
                placeholder="••••••••" 
                value={password} 
                onChange={(e) => setPassword(e.target.value)} 
                required 
                disabled={isLoading}
              />
            </div>
            <Button 
              type="submit" 
              className="w-full text-lg py-3 bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90"
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Connexion...
                </>
              ) : (
                "Se connecter"
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
};


const EspaceExploitationPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isAuthenticated, setIsAuthenticated] = useState(
    JSON.parse(localStorage.getItem('pmuExploitationAuth'))?.isAuthenticated || false
  ); 
  const [userData, setUserData] = useState(
    JSON.parse(localStorage.getItem('pmuExploitationAuth'))?.userData || null
  );
  const [sessionDurationMinutes, setSessionDurationMinutes] = useState(30);
  
  // Charger les paramètres de session
  useEffect(() => {
    const loadSessionSettings = async () => {
      const { data, error } = await supabase
        .from('app_settings')
        .select('value')
        .eq('key', 'general')
        .single();
        
      if (!error && data && data.value) {
        setSessionDurationMinutes(data.value.sessionDureeMinutes || 30);
      }
    };
    
    loadSessionSettings();
  }, []);
  
  // Utiliser le hook de gestion de session
  const { sessionExpiring, formatTimeRemaining } = useSessionTimeout(
    sessionDurationMinutes,
    () => handleLogout(),
    'pmuExploitationAuth'
  );

  useEffect(() => {
    // Vérifier si l'utilisateur est toujours authentifié avec Supabase
    const checkAuth = async () => {
      const { data } = await supabase.auth.getSession();
      if (!data.session && isAuthenticated) {
        handleLogout();
      }
    };
    checkAuth();
  }, []);

  const handleLogin = (status, userInfo) => {
    setIsAuthenticated(status);
    if (status && userInfo) {
      setUserData(userInfo);
      localStorage.setItem('pmuExploitationAuth', JSON.stringify({
        isAuthenticated: true,
        userData: userInfo
      }));
    }
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    setIsAuthenticated(false);
    setUserData(null);
    localStorage.removeItem('pmuExploitationAuth');
    toast({ title: "Déconnexion", description: "Vous avez été déconnecté.", className: "bg-blue-500 text-white" });
    navigate('/');
  };

  const menuItems = [
    { path: 'guichetieres', label: 'Guichetières', icon: <UserCog className="h-5 w-5" /> },
    { path: 'techniciens', label: 'Techniciens', icon: <Wrench className="h-5 w-5" /> },
    { path: 'chefs-agence', label: "Chefs d'agence", icon: <Users className="h-5 w-5" /> },
    { path: 'agences', label: 'Agences', icon: <Building className="h-5 w-5" /> },
    { path: 'etat-planning-general', label: 'État Planning Général', icon: <CalendarDays className="h-5 w-5" /> },
    { path: 'statistiques', label: 'Statistiques', icon: <BarChartHorizontalBig className="h-5 w-5" /> },
    { path: 'parametres', label: 'Paramètres', icon: <Settings className="h-5 w-5" /> },
  ];

  if (!isAuthenticated) {
    return <LoginPage onLogin={handleLogin} />;
  }
  
  return (
    <div className="flex flex-col md:flex-row gap-8">
      <motion.aside 
        initial={{ x: -100, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="md:w-64"
      >
        <Card className="shadow-lg sticky top-20 glassmorphism">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-3">
              <Avatar className="h-10 w-10">
                <AvatarFallback className="bg-primary/10 text-primary">
                  {userData?.email?.charAt(0).toUpperCase() || 'E'}
                </AvatarFallback>
              </Avatar>
              <div>
            <CardTitle className="text-xl text-primary">Menu Exploitation</CardTitle>
                <CardDescription className="text-sm">{userData?.email || 'Utilisateur'}</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <nav className="flex flex-col space-y-2">
              {menuItems.map((item) => (
                <Button
                  key={item.path}
                  asChild
                  variant={location.pathname.endsWith(item.path) ? 'default' : 'ghost'}
                  className="justify-start text-base"
                >
                  <Link to={item.path}>
                    {item.icon && React.cloneElement(item.icon, { className: 'mr-3 h-5 w-5' })}
                    {item.label}
                  </Link>
                </Button>
              ))}
            </nav>
            {/* Indicateur de temps session */}
          {sessionExpiring && (
            <div className="mt-4 p-2 bg-yellow-100 dark:bg-yellow-900/40 text-yellow-800 dark:text-yellow-200 rounded-md flex items-center">
              <Timer className="h-4 w-4 mr-2 text-yellow-600 dark:text-yellow-400" />
              <div className="text-xs font-medium">
                <div>Session expirante</div>
                <div>{formatTimeRemaining()}</div>
              </div>
            </div>
          )}
          
          <Button
              variant="outline"
              className="w-full justify-start text-base mt-4 hover:bg-destructive/10 hover:text-destructive"
              onClick={handleLogout}
            >
              <LogOut className="mr-3 h-5 w-5 text-red-500" />
              Déconnexion
            </Button>
          </CardContent>
        </Card>
      </motion.aside>
      <main className="flex-1">
        <motion.div
          key={location.pathname}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
        >
          <Outlet />
        </motion.div>
      </main>
    </div>
  );
};

export default EspaceExploitationPage;
